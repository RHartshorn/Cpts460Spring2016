                  CS460 TAKEHOME EXAM #1
                  DUE: Friday, 2-26-2016
		  DEMO: Monday, 2-29-1016, 12:00pm-7:00pm

           DEMO to TA, Turn-in a hardcopy of your work

==============================================================================
1. Implement a load(char *filename, int segment) function AND USE IT IN the 
second part of this takehome exam.

READ: Chapter 5.4.2. Program Loader

Executable a.out files generated by BCC have a 32-bit header containing 8 long 
values. 

  struct header{
     u32 ID_space:         // 0x04100301:combined I&D or 0x04200301:separate I&D
     u32 magic_number;     // 0x00000020
     u32 tsize;            // code section size in bytes
     u32 dsize;            // initialized data section size in bytes
     u32 bsize;            // bss section size in bytes
     u32 zero;             // 0
     u32 total_size;       // total memory size, including heap
     u32 symbolTable_size; // only if symbol table is present
}
In our case, the the ID_space field is always 0x04100301 (single segment model) 

A loader is a program which loads a binary executable file into memory for 
execution. In a real OS kernel with file system support, the loader typically 
uses the kernel's internal open() function to open the image file for read. 
Then it uses the kernel's internal read() function to load the image file into 
memory. We shall show this later when we add file system support to the MTX 
kernel. In the meantime, we shall modify the MTX booter as a loader. In this 
case, the loader is almost the same as a booter, except that it is not a
standalone program but a callable function in kernel. The loader's algorithm is

/******** Algorithm of MTX Loader *********/
int load(char *filename, u16 segment)
{
   1. find the inode of filename; return 0 if fails;
   2. read file header to get tsize, dsize and bsize;
   3. load [code|data] sections of filename to memory segment;
   4. clear bss section of loaded image to 0;
   5. return 1 for success;
}

To load (1KB) blocks of a FD disk into memory, you must use BIOS INT 0x13.

Add the following assembly code to your ts.s file of the MTX kernel:

        .globl _diskr,_setes,_inces,_printf

                               !        4    6      8     10
_diskr:                        ! diskr(cyl, head, sector, buf)                 
        push  bp
	mov   bp,sp
	
        movb  dl, #0x00        ! drive 0=fd0 in DL
        movb  dh, 6[bp]        ! head        in DH
        movb  cl, 8[bp]        ! sector      in CL
        incb  cl               ! inc sector by 1 to suit BIOS
        movb  ch, 4[bp]        ! cyl         in CH
        mov   ax, #0x0202      ! (AH)=0x02=READ, (AL)=02 sectors
        mov   bx, 10[bp]       ! put buf value in BX ==> addr = [ES,BX]

!---------- call BIOS INT 0x13 ------------------------------------
        int  0x13              ! call BIOS to read the block 
!-----------------------------------------------------------------
        jb   error             ! to error if CarryBit is on [read failed]

	mov   sp,bp
	pop   bp
	ret

_setes:  push  bp              ! setes(segment): set ES to a segment        
	 mov   bp,sp
	
         mov   ax,4[bp]        
         mov   es,ax

	 mov   sp,bp
	 pop   bp
	 ret

_inces:                        ! inces() inc ES by 0x40, or 1K
         mov   ax,es
         add   ax,#0x40
         mov   es,ax
         ret

error:
        push #msg
        call _printf
        int  0x19                       ! reboot
msg:    .asciz  "Loading Error!"


To load a disk block number, blk, into char buf[1024]: call get_block():
 
int get_block(u16 blk, char *buf)  // load disk block blk to char buf[1024]
{
    // Convert blk into (C,H,S) format by Mailman to suit disk geometry
    //      CYL         HEAD            SECTOR         
    diskr( blk/18, ((2*blk)%36)/18, (((2*blk)%36)%18), buf);
}

NOTE: block numbers in INODEs are u32 values. You must Call the get_block() 
      function with blk of the right size.


======================= PART 2 ==========================================

2. Implement fork()-exec() in MTX kernel AND add fork, exec User mode commands.

DIRECTIONS: LAB Assignment #5 posting

==========================================================================
     