460 Lab Assignment #1

                   CS460 Lab Assignment #1 
###########################################################################
                    DUE : to be posted
###########################################################################
   
1. REQURIEMENT:
   To deveop a boot program for booting the MTX operating system.

2. Background Reading List
   Notes #2: Booting
   Chapter 3 of TEXT: booting MTX parts only

3-1. Download the vdisk HD image. Use it as a virtual HD, as in
        qemu -hda vdisk
     When the partition memu shows up, boot from a partition number.

     LAB#1 IS FOR YOU TO WRITE A BOOTER PROGRAM TO REPLACE the booter on the
     HD to boot up a MTX kernel form a partition.

3-2. Background: Computer Architecture and Programming Environment
     Lab#1 assumes the following hardware and software environments.

     Hardware: Intel X86 based PC running Linux. For convenience, use a virtual
               machine that emulates the PC hardware: QEMU, VMware, VirtualBox,
               etc.
     Software: BCC compiler-assembler-linker under Linux. 

     When a PC starts, it is in the so-called 16-bit UNPROTECTED mode, also 
     known as the 16-bit real mode. While in this mode, the PC's CPU can only 
     execute 16-bit code and access 1MB memory. The diagram below shows the 1MB
     memory layout, shown in 64KB segments.

                      1MB MEMORY layout in 64KB SEGMENTS

           0x0000    0x1000   .......     0x9000     0xA000 ... 0xF000
           -----------------------------------------------------------
           |         |     ..........     |          |          BIOS |
           -----------------------------------------------------------
           |<-------------- 640KB RAM area --------->|<--- ROM ----->|

     The CPU's internal registers are
              segment registers: CS, DS, SS, ES 
              general registers: AX, BX, CX, DX, BP, SI, DI
              status  register : FLAG
              stack pointer    : SP
              instruction point or program counter: IP
     All registers are 16-bit wide. 
  
     The CPU operates as follows:

1. In real-mode, the CPU has 20-bit address lines for 2**20 = 1MB memory, e.g.
   20-bit addresses
                    0x00000, 0x00010, 0x00020
                    0x10000, 0x20000, 0x30000, etc.

   A segment is a block of memory beginning from a 16-byte boundary. Since the 
   last 4 bits of a segment address are always 0, it suffices to represent a
   segment address by the leading 16 bits. Each segment size is up to 64KB.

2. The CPU in has 4 segment registers, each 16-bits.

       CS -> Code  segment  = program code or instructions
       DS -> Data  segment  = static and global data (ONE COPY only)
       SS -> Stack segment  = stack area for calling and local variables. 
       ES -> Extra segment  = temp area; may be used for malloc()/mfree()

3. In a program, every address is a 16-bit VIRTUAL address (VA). For each 16-bit
   VA, the CPU automatically translates it into a 20-bit PHYSICAL address (PA)
   by
          (20-bit)PA = ((16-bit)segmentRegister << 4) + (16-bit)VA.
   
  where segmentRegister is either by default or by a segment prefix in the 
  instruction.
  Examples:
  Assume CS=0x1234. IP=0x2345 ==> PA = (0x1234<<4) + 0x2345 = 0x14685 (20 bits)
         DS=0x1000. mov ax,0x1234 ==> PA=0x10000 + 0x1234   = 0x11234, etc.

IMPORTANT: In a program, every address is a 16-bit VA, which is an OFFSET in a
           memory segment. When accessing memory, the CPU maps every VA to a 
           20-bit PA.

4. The number of DISTINCT segments available to the CPU depends on the
   memory model of the executing program, which is determined by the compiler
   and linker used to generate the binary executable image. The most often used
   memory models are

    One-segment model :(COM files): CS=DS=SS all in ONE segment <= 64KB
    Separate I&D model:(EXE files): CS=CodeSegment, DS=SS=Data+Stack segment 
  
One-segment model programs can be loaded to, and executed from, any available 
segment in memory. In order to run a One-segment memory model program, the 
following steps are needed:

(1). A C compiler and assembler which generate 16-bit (object) code
(2). A linker that combines the object code to generate a ONE-segment
     binary executable image. We shall use BCC under Linux to do (1) and (2).

(3). LOAD the binary executable image into memory (at a segment boundary) 
     and set CPU's CS=DS=SS = loaded segment.
         Set SP at the HIGH end of the segment.
         Set IP at the beginning instruction in the segment.
     Then let the CPU execute the image.
 

                      5. PRE-WORK #1:
                     DUE: in one week

5-1. Given: The following bs.s file in BCC's assembly

!---------------------- bs.s file -------------------------------------------
         BOOTSEG  = 0x9000
	 SSP      = 32*1024
	
        .globl _main, _prints,_color,_dap        ! IMPORT 
        .globl _diskr,_getc,_putc,_error         ! EXPORT
	
        !-------------------------------------------------------------------
        ! MBR loaded at segment 0x07C0. Load entire booter to segment 0x9000
        !-------------------------------------------------------------------
        mov  ax,#BOOTSEG
        mov  es,ax
        xor  bx,bx          ! clear BX = 0
        !---------------------------------------------------
        !  read entire booter in sector#1-8KB to 0x9000
        !---------------------------------------------------
        mov  dx,#0x0080     ! dh=head=0, dL=0x80=HD or USB's MBR
        xor  cx,cx
        incb cl             ! cyl 0, sector 1
	incb cl             ! cyl 0, sector 2 
        mov  ax, #0x0220    ! READ 16 sectors (booter<8KB)
        int  0x13

        jmpi next,BOOTSEG   ! CS=BOOTSEG, IP=next

next:
        mov  ax,cs          ! establish segments again
        mov  ds,ax          ! we know ES,CS=0x9000. Let DS=CS  
        mov  ss,ax
        mov  es,ax
        mov  sp,#SSP        ! 32 KB stack


!
!                
!   0x1000                           0x9000                        0xA000  
!   ---------------------------------|---------------|-------------|----------
!   |   |//|                         |Code|Data|stack|             |  ROM
!   ----|----------------------------|---------------|-------------|----------
!       0x7C00                       CS              sp=32KB
!                                    DS              from SS
!                                    SS 
!

!-------------------------------------------------------------	
        mov  ax,#0x0012     ! Call BIOS for 640x480 color mode     
	int  0x10
!------------------------------------------------------------
        call _main          ! call main() in C
     
        test ax, ax         ! check return value from main()
        je   _error         ! main() return 0 if error

        jmpi 0, 0x1000

        !------------------------------------------------------
        !  char getc( )   function: return a char from keyboard
        !------------------------------------------------------
_getc:
        xorb   ah,ah           ! clear ah
        int    0x16            ! call BIOS to get a char in AX
        andb   al,#0x7F        ! 7-bit ascii  
        ret 
	
        !---------------------------------------------------
        ! int putc(char c)  function: print a char to screen
        !---------------------------------------------------
_putc:           
        push   bp
	mov    bp,sp

        movb   al,4[bp]        ! get the char into aL
        movb   ah,#14          ! aH = 14
        mov    bx,_color       ! cyan
        int    0x10            ! call BIOS to display the char

        pop    bp
	ret
        
        !------------------------------
        !       error() & reboot
        !------------------------------
_error:
        push #msg
        call _prints
        int  0x19               ! reboot
	
msg:   .asciz  "\n\rError!\n\r"

!setds(segment) : set DS to segment to R/W memory outside BOOTSEG 
!_setds:
	push  bp
	mov   bp,sp
	mov   ax,4[bp]
	mov   ds,ax
	pop   bp
	ret
	
! diskr(): read disk sectors specified by _dap in C code		
_diskr: 
         mov dx, #0x0080
	 mov ax, #0x4200
	 mov si, #_dap

         int 0x13               ! call BIOS to read the block 
         jb  _error             ! to error() if CarryBit is on [read failed]
	 ret


5-2. The following bc.c file

typedef unsigned char  u8;
typedef unsigned short u16;
typedef unsigned long  u32;

#define  GREEN  10         // color byte for putc()
#define  CYAN   11
#define  RED    12
#define  MAG    13
#define  YELLOW 14

struct partition {         // Partition table entry in MBR
       u8  drive;          // 0x80 - active 
       u8  head;	   // starting head 
       u8  sector;	   // starting sector 
       u8  cylinder;       // starting cylinder 
       u8  type;	   // partition type 
       u8  end_head;       // end head 
       u8  end_sector;	   // end sector 
       u8  end_cylinder;   // end cylinder 
       u32 start_sector;   // starting sector counting from 0 
       u32 nr_sectors;     // nr of sectors in partition 
};

struct dap{                // DAP for extended INT 13-42  
       u8   len;           // dap length=0x10 (16 bytes)
       u8   zero;          // must be 0  
       u16  nsector;       // number of sectors to read: 1 to 127
       u16  addr;          // memory address = (segment:addr)
       u16  segment;    
       u32  s1;            // low  4 bytes of sector#
       u32  s2;            // high 4 bytes of sector#
};

struct dap dap, *dp;       // global dap struct
u16 color = RED;           // initial color for putc()

#define  BOOTSEG 0x9000

// #include "bio.c" <========= WRITE YOUR OWN io.c file !!!!

char mbr[512];
char ans[64];

// load a disk sector to (DS, addr), where addr is an offset in segment
int getSector(u32 sector, char *addr)
{
  dp->addr    = addr;
  dp->s1      = (u32)sector;
  diskr();    // call int13-43 in assembly
}

int main()
{
  int i;
  struct partition *p;
  printf("booter start in main()\n");

  // initialize the dap struct
  dp = &dap;
  dp->len  = 0x10;        // must be 16
  dp->zero = 0;           // must be 0
  dp->nsector = 1;        // load one sector
  dp->addr = 0;           // will set to addr              
  dp->segment = BOOTSEG;  // load to which segment
  dp->s1 = 0;             // will set to LBA sector#
  dp->s2 = 0;             // high 4-byte address s2=0

  getSector((u32)0, (u16)mbr); // get MBR
  ==========================================================
  In the MBR, partition table begins at byte offset 0x1BE
  // DO #1:  WRITE C CODE TO PRINT THE PARTITIONS
  ==========================================================
  color = CYAN;
  while(1){
    printf("what's your name? ");
    gets(ans);
    if (strcmp(ans, "quit")==0){
      printf("\nexit main()\n");
      break;
    }
    printf("\nWelcome %s!\n", ans);
  }
}
====================================================================
DO #2: The bs.s file contains
          char getc()         : return a char from keyboard
          int  putc(char c)   : display a char to screen  
   which are supported by BIOS. There are NO OTHER terminal I/O functions!!!

   Write your OWN gets(char s[ ]) fucntion to get a string.
   Write your OWN printf(char *fmt, ...) as in CS360

Then, include YOUR io.c file in bc.c. 
      Do NOT use KCW's io.o in linking step.
===================================================================

5-3. Use BCC to generate a one-segment binary executable a.out WITHOUT header
     
     as86 -o bs.o  bs.s
     bcc -c -ansi  bc.c
     ld86 -d bs.o bc.o io.o /usr/lib/bcc/libc.a  # io.o is from KCW's io.c

5-4. dump a.out to a VIRTUAL HD:

     dd if=a.out of=vdisk bs=16 count=27 conv=notrunc
     dd if=a.out of=vdisk bs=512 seek=1  conv=notrunc


5-5. Run QEMU on vdisk
     
     qemu -hda vdisk

=======================================================================